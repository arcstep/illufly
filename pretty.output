@auth @login @api-doc
Feature: 用户多设备登录管理 # bdd/features/fastapi/auth/mock/login.feature:3
  """
  用户认证系统 - 多设备登录管理
  基础路径: /api/auth
  版本: 0.7
  最后更新: 2024-12-15
  负责人: @xuehongwei
  - POST /auth/login: 用户登录
  - 参数 (Form):
  - username: str, 必填, 用户名
  - password: str, 必填, 密码
  - 返回:
  - success: bool
  - token_data: dict
  - require_password_change: bool
  - 错误码:
  - 400: 参数验证失败
  - 401: 认证失败
  - 403: 账户锁定/未激活
  - 500: 服务器错误
  - POST /auth/logout: 退出登录
  - 参数: 无
  - 返回:
  - success: bool
  - message: str
  - Cookie:
  - 清除 access_token
  - 清除 refresh_token
  - POST /auth/change-password: 修改密码
  - 参数 (Form):
  - current_password: str, 必填
  - new_password: str, 必填
  - 返回:
  - success: bool
  - message: str
  - 错误码:
  - 400: 密码验证失败
  - 500: 服务器错误
  实现支持多设备同时登录的用户认证系统，确保安全性的同时提供便捷的用户体验。
  - 用户需要在多个设备（手机、平板、电脑等）上同时使用系统
  - 需要支持单个设备的独立退出
  - 需要支持零登录(Zero Login)以提升用户体验
  - 零登录：利用刷新令牌自动完成登录，无需用户输入凭据
  - 设备令牌：每个设备独立的认证标识
  - HTTP-only Cookie：仅服务器可访问的安全Cookie
  - 所有密码必须符合强度要求
  - 支持账户锁定机制
  - 使用 HTTP-only Cookie 存储认证信息
  - REQ-001: 多设备支持
  - REQ-002: 设备管理
  - SEC-001: 认证安全策略
  """
  Background:   # bdd/features/fastapi/auth/mock/login.feature:70

  @core @happy-path
  Scenario: 成功登录单个设备     # bdd/features/fastapi/auth/mock/login.feature:75
    Given 系统已有注册用户       # None
    When 用户在设备A提供正确的登录信息 # None
      | Field    | Value      |
      | username | testuser   |
      | password | Test123!@# |
    Then 系统应验证用户凭据       # None
    And 返回成功响��，包含       # None
      | Field                   | Type    |
      | success                 | boolean |
      | token_data              | object  |
      | require_password_change | boolean |
    And 设置设备A的认证Cookie   # None

  Scenario: 成功在多个设备上登录   # bdd/features/fastapi/auth/mock/login.feature:96
    Given 系统已有注册用户       # None
    Given 用户已在设备A登录      # None
    When 用户在设备B提供正确的登录信息 # None
      | Field    | Value      |
      | username | testuser   |
      | password | Test123!@# |
    Then 系统应验证用户凭据       # None
    And 返回成功响应，包含        # None
      | Field                   | Type    |
      | success                 | boolean |
      | token_data              | object  |
      | require_password_change | boolean |
    And 设置设备B的认证Cookie   # None

  Scenario: 单个设备退出         # bdd/features/fastapi/auth/mock/login.feature:110
    Given 系统已有注册用户         # None
    Given 用户已在设备A和设备B登录    # None
    When 用户在设备A请求退出        # None
    Then 系统应清除设备A的认证Cookie # None
    And 设备B的令牌仍然有效         # None

  Scenario: 零登录支持              # bdd/features/fastapi/auth/mock/login.feature:116
    Given 系统已有注册用户             # None
    Given 用户持有有效的http_only刷新令牌 # None
    When 用户请求零登录               # None
    Then 系统应验证刷新令牌             # None
    And 返回成功响应，包含新的访问令牌        # None

  Scenario: 登录失败 - 错误的凭据  # bdd/features/fastapi/auth/mock/login.feature:122
    Given 系统已有注册用户        # None
    When 用户在设备A提供错误的登录信息  # None
      | Field    | Value         |
      | username | testuser      |
      | password | wrongpassword |
    Then 系统应返回401未授权错误    # None
    And 错误信息应包含认证失败的详情    # None

  @security @error-handling
  Scenario: 登录失败 - 账户被锁定  # bdd/features/fastapi/auth/mock/login.feature:131
    Given 系统已有注册用户        # None
    Given 用户账户已被锁定        # None
    When 用户在设备A尝试登录       # None
    Then 系统应返回403禁止访问错误   # None
    And 错误信息应说明账户已锁定      # None

  Scenario: 登录失败 - 账户未激活  # bdd/features/fastapi/auth/mock/login.feature:143
    Given 系统已有注册用户        # None
    Given 用户账户未激活         # None
    When 用户在设备A尝试登录       # None
    Then 系统应返回403禁止访问错误   # None
    And 错误信息应说明账户未激活      # None

  Scenario: 登录失败 - 缺少必填字段  # bdd/features/fastapi/auth/mock/login.feature:149
    Given 系统已有注册用户         # None
    When 用户在设备A提供不完整的登录信息  # None
      | Field    | Value    |
      | username | testuser |
    Then 系统应返回400错误        # None
    And 错误信息应说明缺少必填字段      # None
      """
      ## 实现注意事项
      
      ### 安全实现
      - 密码验证必须使用恒定时间比较，防止计时攻击
      - 所有登录尝试需要记录审计日志
      - 实现 rate limiting 防止暴力破解
      - 考虑使用 IP 信誉系统
      
      ### 会话管理
      - 使用 Redis 存储会话状态
      - 实现会话集群同步机制
      - 设置合理的会话超时时间
      - 维护设备令牌映射关系
      
      ### 性能考虑
      - 密码哈希使用适当的计算强度
      - 令牌验证需要缓存机制
      - 考虑登录请求的并发处理
      - 实现登录队列防止峰值冲击
      
      ### 监控告警
      - 监控异常登录行为
      - 设置账户锁定告警
      - 记录地理位置异常
      - 可疑IP活动检测
      
      ### 运维支持
      - 提供管理员解锁接口
      - 支持会话强制失效
      - 实现登录日志查询
      - 提供会话状态诊断
      
      ### 客户端集成
      - 提供登录状态检查接口
      - 实现令牌自动刷新机制
      - 处理多标签页同步
      - 支持优雅的掉线重连
      """

@auth @api-doc
Feature: 用户认证系统 - 注册模块 # bdd/features/fastapi/auth/mock/register.feature:2
  """
  用户认证系统 - 注册模块 API 文档
  基础路径: /api/auth
  版本: 0.7
  最后更新: 2024-12-15
  负责人: @xuehongwei
  - POST /auth/register: 用户注册
  - 参数 (Form):
  - username: str, 必填, 用户名
  - password: str, 必填, 密码
  - email: str, 必填, 电子邮箱
  - invite_code: str, 可选, 邀请码
  - 返回:
  - success: bool, 操作是否成功
  - user_info: dict, 用户信息
  - user_id: str, 用户ID
  - username: str, 用户名
  - email: str, 电子邮箱
  - roles: List[str], 用户角色
  - is_active: bool, 是否激活
  - created_at: datetime, 创建时间
  - Cookie:
  - access_token: JWT访问令牌
  - refresh_token: JWT刷新令牌
  - 错误码:
  - 400: 参数验证失败
  - 500: 服务器内部错误
  - 用户名:
  - 长度: 3-32个字符
  - 允许字符: 字母、数字、下划线
  - 不允许纯数字
  - 密码强度要求:
  - 最小长度: 8个字符
  - 必须包含: 大小写字母、数字、特殊字符
  - 不允许常见密码
  - 邮箱:
  - 标准邮箱格式
  - 域名必须有效
  - 邀请码:
  - 长度: 8-16个字符
  - 有效期: 24小时
  - 使用次数限制
  - 密码加密存储: Argon2id
  - 防重放攻击: 注册请求去重
  - 频率限制: 每IP每小时最多10次注册尝试
  - 敏感信息脱敏
  """
  Background: 测试环境准备  # bdd/features/fastapi/auth/mock/register.feature:57

  @register @core @happy-path @wip
  Scenario: [POST /auth/register] 基本用户注册  # bdd/features/fastapi/auth/mock/register.feature:63
    Given Mock系统已启动                       # bdd/features/steps/auth_register_steps.py:6
    And 用户管理模块正常运行                        # bdd/features/steps/auth_register_steps.py:11
    And 清理测试数据                            # bdd/features/steps/auth_register_steps.py:16
    When 提交用户注册请求                         # bdd/features/steps/auth_register_steps.py:26
      | 字段       | 值                | 说明  |
      | username | mockuser         | 用户名 |
      | password | Test123!@#       | 密码  |
      | email    | mock@example.com | 邮箱  |
    Then 系统返回状态码 200                      # bdd/features/steps/auth_register_steps.py:43
    And 返回成功响应                            # bdd/features/steps/auth_register_steps.py:47
    And 返回的用户信息包含                         # bdd/features/steps/auth_register_steps.py:52
      | 字段        | 值                | 说明     |
      | username  | mockuser         | 用户名    |
      | email     | mock@example.com | 邮箱     |
      | roles     | ["user","guest"] | 用户角色列表 |
      | is_active | true             | 账户激活状态 |
    And 密码应当被安全存储                         # bdd/features/steps/auth_register_steps.py:77
    And 系统应设置认证Cookie                     # bdd/features/steps/auth_register_steps.py:85
    And 记录注册审计日志                          # bdd/features/steps/auth_register_steps.py:109

  @register @validation @error
  Scenario Outline: 注册参数验证 -- @1.1 无效的用户名  # bdd/features/fastapi/auth/mock/register.feature:93
    Given Mock系统已启动                        # None
    And 用户管理模块正常运行                         # None
    And 清理测试数据                             # None
    When 提交用户注册请求                          # None
      | 字段       | 值              |
      | username | a              |
      | password | Test123!@#     |
      | email    | test@email.com |
    Then 系统返回状态码 400                       # None
    And 返回错误信息包含 "用户名长度不足"                 # None

  @register @validation @error
  Scenario Outline: 注册参数验证 -- @1.2 无效的用户名  # bdd/features/fastapi/auth/mock/register.feature:94
    Given Mock系统已启动                        # None
    And 用户管理模块正常运行                         # None
    And 清理测试数据                             # None
    When 提交用户注册请求                          # None
      | 字段       | 值              |
      | username | ab#$           |
      | password | Test123!@#     |
      | email    | test@email.com |
    Then 系统返回状态码 400                       # None
    And 返回错误信息包含 "用户名包含非法字符"               # None

  @register @validation @error
  Scenario Outline: 注册参数验证 -- @2.1 无效的密码  # bdd/features/fastapi/auth/mock/register.feature:98
    Given Mock系统已启动                       # None
    And 用户管理模块正常运行                        # None
    And 清理测试数据                            # None
    When 提交用户注册请求                         # None
      | 字段       | 值              |
      | username | testuser       |
      | password | 123            |
      | email    | test@email.com |
    Then 系统返回状态码 400                      # None
    And 返回错误信息包含 "密码不符合强度要求"              # None

  @register @validation @error
  Scenario Outline: 注册参数验证 -- @2.2 无效的密码  # bdd/features/fastapi/auth/mock/register.feature:99
    Given Mock系统已启动                       # None
    And 用户管理模块正常运行                        # None
    And 清理测试数据                            # None
    When 提交用户注册请求                         # None
      | 字段       | 值              |
      | username | testuser       |
      | password | password       |
      | email    | test@email.com |
    Then 系统返回状态码 400                      # None
    And 返回错误信息包含 "密码不符合强度要求"              # None

  @register @validation @error
  Scenario Outline: 注册参数验证 -- @3.1 无效的邮箱  # bdd/features/fastapi/auth/mock/register.feature:103
    Given Mock系统已启动                       # None
    And 用户管理模块正常运行                        # None
    And 清理测试数据                            # None
    When 提交用户注册请求                         # None
      | 字段       | 值          |
      | username | testuser   |
      | password | Test123!@# |
      | email    | invalid    |
    Then 系统返回状态码 400                      # None
    And 返回错误信息包含 "邮箱格式无效"                 # None

  @register @validation @error
  Scenario Outline: 注册参数验证 -- @3.2 无效的邮箱  # bdd/features/fastapi/auth/mock/register.feature:104
    Given Mock系统已启动                       # None
    And 用户管理模块正常运行                        # None
    And 清理测试数据                            # None
    When 提交用户注册请求                         # None
      | 字段       | 值          |
      | username | testuser   |
      | password | Test123!@# |
      | email    | @test.com  |
    Then 系统返回状态码 400                      # None
    And 返回错误信息包含 "邮箱格式无效"                 # None

  @register @duplicate @error
  Scenario: 注册重复用户名        # bdd/features/fastapi/auth/mock/register.feature:107
    Given Mock系统已启动        # None
    And 用户管理模块正常运行         # None
    And 清理测试数据             # None
    Given 存在用户名 "mockuser" # None
    When 提交用户注册请求          # None
      | 字段       | 值               |
      | username | mockuser        |
      | password | Test123!@#      |
      | email    | new@example.com |
    Then 系统返回状态码 400       # None
    And 返回错误信息包含 "用户名已存在"  # None

  @register @invite-code
  Scenario: 使用邀请码注册  # bdd/features/fastapi/auth/mock/register.feature:118
    Given Mock系统已启动  # None
    And 用户管理模块正常运行   # None
    And 清理测试数据       # None
    When 提交用户注册请求    # None
      | 字段          | 值                |
      | username    | mockuser         |
      | password    | Test123!@#       |
      | email       | mock@example.com |
      | invite_code | VALID_CODE       |
    Then 系统返回状态码 200 # None
    And 返回成功响应       # None

  @register @invite-code @error
  Scenario: 使用无效邀请码                    # bdd/features/fastapi/auth/mock/register.feature:129
    Given Mock系统已启动                    # None
    And 用户管理模块正常运行                     # None
    And 清理测试数据                         # None
    When 提交用户注册请求                      # None
      | 字段          | 值                |
      | username    | mockuser         |
      | password    | Test123!@#       |
      | email       | mock@example.com |
      | invite_code | INVALID_CODE     |
    Then 系统返回状态码 400                   # None
    And 返回错误信息包含 "Invalid invite code" # None
      """
      ## 实现注意事项
      
      ### 数据安全
      - 使用 Argon2id 进行密码哈希
      - 实现密码历史记录
      - 邮箱地址加密存储
      - 关键操作使用事务
      
      ### 性能优化
      - 用户名索引优化
      - 邮箱查询缓存
      - 邀请码验证缓存
      - 注册流程异步处理
      
      ### 可用性保障
      - 支持注册失败重试
      - 邮箱验证容错处理
      - 友好的错误提示
      - 注册进度保存
      
      ### 监控指标
      - 注册成功率
      - 验证失败分布
      - 邀请码使用情况
      - 注册来源分析
      
      ### 运维支持
      - 提供注册数据导出
      - 支持批量邀请码生成
      - 注册策略动态配置
      - 提供运营数据分析
      """

@auth @token @api-doc
Feature: 令牌管理系统(Mock版本) # bdd/features/fastapi/auth/mock/token.feature:2
  """
  令牌管理系统 API 文档
  基础路径: /api/auth
  版本: 0.7
  最后更新: 2024-12-15
  负责人: @xuehongwei
  - POST /auth/refresh-token: 刷新访问令牌
  - 参数 (Form):
  - refresh_token: str, 必填, 刷新令牌
  - 返回:
  - success: bool
  - access_token: str, 新的访问令牌
  - refresh_token: str, 新的刷新令牌
  - 错误码:
  - 400: 无效的令牌
  - 401: 令牌过期/未授权
  - 500: 服务器错误
  - POST /auth/revoke-token: 撤销用户令牌
  - 参数 (Form):
  - username: str, 必填, 用户名
  - 权限要求: ADMIN
  - 返回:
  - success: bool
  - message: str
  - 错误码:
  - 400: 用户不存在
  - 403: 权限不足
  - 500: 服务器错误
  - POST /auth/revoke-access-token: 撤销访问令牌
  - 参数 (Form):
  - username: str, 必填, 用户名
  - 权限要求: ADMIN
  - 返回:
  - success: bool
  - message: str
  - username: str
  - 令牌操作需要并发安全
  - 支持集群环境下的令牌同步
  - 所有操作需要记录审计日志
  """
  Background:   # bdd/features/fastapi/auth/mock/token.feature:50

  @core @refresh
  Scenario: [POST /auth/refresh-token] 基础令牌刷新  # bdd/features/fastapi/auth/mock/token.feature:59
    Given 初始化测试环境                              # None
    And 清空令牌存储                                 # None
    And 准备测试用户数据                               # None
      | username | user_id | roles     |
      | admin    | admin1  | ["ADMIN"] |
      | user1    | user1   | ["USER"]  |
    Given 用户持有有效的刷新令牌                          # None
      | 字段            | 值                   |
      | refresh_token | valid_refresh_token |
    When 发起令牌刷新请求                              # None
    Then 系统应返回状态码 200                          # None
    And 响应中包含                                  # None
      | 字段            | 类型     | 说明    |
      | success       | bool   | true  |
      | access_token  | string | 新访问令牌 |
      | refresh_token | string | 新刷新令牌 |

  @core @refresh @error
  Scenario Outline: [POST /auth/refresh-token] 异常令牌刷新 -- @1.1   # bdd/features/fastapi/auth/mock/token.feature:80
    Given 初始化测试环境                                               # None
    And 清空令牌存储                                                  # None
    And 准备测试用户数据                                                # None
      | username | user_id | roles     |
      | admin    | admin1  | ["ADMIN"] |
      | user1    | user1   | ["USER"]  |
    Given 用户持有过期的刷新令牌                                           # None
    When 发起令牌刷新请求                                               # None
    Then 系统应返回状态码 401                                           # None
    And 响应中包含错误信息 "令牌已过期"                                       # None

  @core @refresh @error
  Scenario Outline: [POST /auth/refresh-token] 异常令牌刷新 -- @1.2   # bdd/features/fastapi/auth/mock/token.feature:81
    Given 初始化测试环境                                               # None
    And 清空令牌存储                                                  # None
    And 准备测试用户数据                                                # None
      | username | user_id | roles     |
      | admin    | admin1  | ["ADMIN"] |
      | user1    | user1   | ["USER"]  |
    Given 用户持有无效的刷新令牌                                           # None
    When 发起令牌刷新请求                                               # None
    Then 系统应返回状态码 400                                           # None
    And 响应中包含错误信息 "无效的令牌"                                       # None

  @core @refresh @error
  Scenario Outline: [POST /auth/refresh-token] 异常令牌刷新 -- @1.3   # bdd/features/fastapi/auth/mock/token.feature:82
    Given 初始化测试环境                                               # None
    And 清空令牌存储                                                  # None
    And 准备测试用户数据                                                # None
      | username | user_id | roles     |
      | admin    | admin1  | ["ADMIN"] |
      | user1    | user1   | ["USER"]  |
    Given 用户持有已使用的刷新令牌                                          # None
    When 发起令牌刷新请求                                               # None
    Then 系统应返回状态码 400                                           # None
    And 响应中包含错误信息 "令牌已被使用"                                      # None

  @security @revoke @admin
  Scenario: [POST /auth/revoke-token] 管理员撤销用户令牌  # bdd/features/fastapi/auth/mock/token.feature:85
    Given 初始化测试环境                                # None
    And 清空令牌存储                                   # None
    And 准备测试用户数据                                 # None
      | username | user_id | roles     |
      | admin    | admin1  | ["ADMIN"] |
      | user1    | user1   | ["USER"]  |
    Given 管理员已登录                                 # None
    And 存在以下活跃令牌                                 # None
      | user_id | device_id | token_type    |
      | user1   | dev1      | access_token  |
      | user1   | dev2      | refresh_token |
    When 管理员请求撤销用户 "user1" 的所有令牌                 # None
    Then 系统应返回状态码 200                            # None
    And 响应中包含                                    # None
      | 字段      | 值                             |
      | success | true                          |
      | message | "Successfully revoked tokens" |
    And 该用户的所有令牌应被标记为无效                          # None
    And 审计日志应记录此操作                               # None
      | 字段       | 值                   |
      | action   | "revoke_all_tokens" |
      | admin_id | "admin1"            |
      | user_id  | "user1"             |

  @validation
  Scenario: 令牌状态验证   # bdd/features/fastapi/auth/mock/token.feature:105
    Given 初始化测试环境    # None
    And 清空令牌存储       # None
    And 准备测试用户数据     # None
      | username | user_id | roles     |
      | admin    | admin1  | ["ADMIN"] |
      | user1    | user1   | ["USER"]  |
    Given 准备测试令牌数据   # None
      | token_id | status  | expires_in |
      | token1   | active  | 3600       |
      | token2   | revoked | 3600       |
      | token3   | expired | -1         |
    When 分别验证上述令牌    # None
    Then 系统应正确识别令牌状态 # None
    And 返回对应的验证结果    # None
      | token_id | is_valid | reason    |
      | token1   | true     | null      |
      | token2   | false    | "revoked" |
      | token3   | false    | "expired" |

  @concurrent @performance
  Scenario Outline: 并发令牌刷新 -- @1.1   # bdd/features/fastapi/auth/mock/token.feature:130
    Given 初始化测试环境                    # None
    And 清空令牌存储                       # None
    And 准备测试用户数据                     # None
      | username | user_id | roles     |
      | admin    | admin1  | ["ADMIN"] |
      | user1    | user1   | ["USER"]  |
    Given 准备10个并发测试客户端               # None
    When 同时发起令牌刷新请求                  # None
    Then 所有请求应得到正确处理                 # None
    And 不应产生重复令牌                     # None
    And 系统状态应保持一致                    # None
    And 响应时间应在500ms内                 # None
      """
        ## 实现注意事项
        - 所有令牌操作需要考虑并发安全
        - 令牌撤销需要支持集群环境
        - 需要实现令牌状态的持久化存储
        - 审计日志需要包含详细的操作信息
        - 令牌验证需要使用缓存提升性能
        - 支持令牌黑名单机制
      """

  @concurrent @performance
  Scenario Outline: 并发令牌刷新 -- @1.2   # bdd/features/fastapi/auth/mock/token.feature:131
    Given 初始化测试环境                    # None
    And 清空令牌存储                       # None
    And 准备测试用户数据                     # None
      | username | user_id | roles     |
      | admin    | admin1  | ["ADMIN"] |
      | user1    | user1   | ["USER"]  |
    Given 准备50个并发测试客户端               # None
    When 同时发起令牌刷新请求                  # None
    Then 所有请求应得到正确处理                 # None
    And 不应产生重复令牌                     # None
    And 系统状态应保持一致                    # None
    And 响应时间应在500ms内                 # None
      """
        ## 实现注意事项
        - 所有令牌操作需要考虑并发安全
        - 令牌撤销需要支持集群环境
        - 需要实现令牌状态的持久化存储
        - 审计日志需要包含详细的操作信息
        - 令牌验证需要使用缓存提升性能
        - 支持令牌黑名单机制
      """

  @concurrent @performance
  Scenario Outline: 并发令牌刷新 -- @1.3   # bdd/features/fastapi/auth/mock/token.feature:132
    Given 初始化测试环境                    # None
    And 清空令牌存储                       # None
    And 准备测试用户数据                     # None
      | username | user_id | roles     |
      | admin    | admin1  | ["ADMIN"] |
      | user1    | user1   | ["USER"]  |
    Given 准备100个并发测试客户端              # None
    When 同时发起令牌刷新请求                  # None
    Then 所有请求应得到正确处理                 # None
    And 不应产生重复令牌                     # None
    And 系统状态应保持一致                    # None
    And 响应时间应在500ms内                 # None
      """
        ## 实现注意事项
        - 所有令牌操作需要考虑并发安全
        - 令牌撤销需要支持集群环境
        - 需要实现令牌状态的持久化存储
        - 审计日志需要包含详细的操作信息
        - 令牌验证需要使用缓存提升性能
        - 支持令牌黑名单机制
      """

Feature: 管理员用户管理 # bdd/features/fastapi/users/admin_user.feature:2
  作为系统管理员
  我想管理系统用户
  以维护用户账户和权限
  Background:   # bdd/features/fastapi/users/admin_user.feature:7

  Scenario: 获取用户列表     # bdd/features/fastapi/users/admin_user.feature:10
    Given 当前用户具有管理员权限  # None
    When 管理员请求获取用户列表   # None
    Then 系统应返回所有用户信息列表 # None
    And 每个用户信息应包含      # None
      | Field     | Type    |
      | user_id   | string  |
      | username  | string  |
      | email     | string  |
      | roles     | array   |
      | is_active | boolean |
      | is_locked | boolean |

  Scenario: 更新用户角色    # bdd/features/fastapi/users/admin_user.feature:22
    Given 当前用户具有管理员权限 # None
    When 管理员更新指定用户的角色 # None
      | Field   | Value            |
      | user_id | <user_id>        |
      | roles   | ["USER","ADMIN"] |
    Then 系统应更新用户角色    # None
    And 返回成功响应        # None

  Scenario: 锁定用户账户    # bdd/features/fastapi/users/admin_user.feature:30
    Given 当前用户具有管理员权限 # None
    When 管理员锁定指定用户账户  # None
      | Field   | Value     |
      | user_id | <user_id> |
      | reason  | 违规操作      |
    Then 系统应锁定该用户账户   # None
    And 记录锁定原因        # None
    And 返回成功响应        # None

  Scenario: 解锁用户账户    # bdd/features/fastapi/users/admin_user.feature:39
    Given 当前用户具有管理员权限 # None
    When 管理员解锁指定用户账户  # None
      | Field   | Value     |
      | user_id | <user_id> |
    Then 系统应解锁该用户账户   # None
    And 返回成功响应        # None

  Scenario: 管理员重置用户密码  # bdd/features/fastapi/users/admin_user.feature:46
    Given 当前用户具有管理员权限  # None
    When 管理员为指定用户重置密码  # None
      | Field        | Value     |
      | user_id      | <user_id> |
      | new_password | Test123!  |
    Then 系统应验证新密码强度    # None
    And 更新用户密码         # None
    And 标记用户下次登录需要修改密码 # None
    And 返回成功响应         # None

  Scenario: 删除用户账户    # bdd/features/fastapi/users/admin_user.feature:56
    Given 当前用户具有管理员权限 # None
    When 管理员删除指定用户账户  # None
      | Field   | Value     |
      | user_id | <user_id> |
    Then 系统应软删除该用户账户  # None
    And 保留用户历史数据      # None
    And 返回成功响应        # None

Feature: 密码管理 # bdd/features/fastapi/users/password_modify.feature:2
  作为系统用户
  我想管理我的密码
  以确保账户安全
  Background:   # bdd/features/fastapi/users/password_modify.feature:7

  Scenario: 修改个人密码   # bdd/features/fastapi/users/password_modify.feature:10
    Given 系统中存在已注册用户 # None
    When 用户修改自己的密码   # None
      | Field        | Value    |
      | old_password | oldpass  |
      | new_password | Test123! |
    Then 系统应验证旧密码    # None
    And 验证新密码强度      # None
    And 更新用户密码       # None
    And 返回成功响应       # None

  Scenario: 修改密码失败 - 旧密码错误  # bdd/features/fastapi/users/password_modify.feature:20
    Given 系统中存在已注册用户        # None
    When 用户使用错误的旧密码尝试修改密码   # None
      | Field        | Value     |
      | old_password | wrongpass |
      | new_password | Test123!  |
    Then 系统应返回400错误         # None
    And 错误信息应说明旧密码验证失败      # None

  Scenario: 修改密码失败 - 新密码强度不足  # bdd/features/fastapi/users/password_modify.feature:28
    Given 系统中存在已注册用户          # None
    When 用户尝试设置弱密码            # None
      | Field        | Value   |
      | old_password | oldpass |
      | new_password | 123456  |
    Then 系统应返回400错误           # None
    And 错误信息应说明密码强度不足         # None

Feature: 密码重置 # bdd/features/fastapi/users/password_reset.feature:2
  作为系统用户
  我想在忘记密码时重置密码
  以重新获得账户访问权限
  Scenario: 请求重置密码        # bdd/features/fastapi/users/password_reset.feature:7
    When 用户请求重置密码         # None
      | Field | Value            |
      | email | test@example.com |
    Then 系统应发送重置密码链接到用户邮箱 # None
    And 返回成功响应            # None

  Scenario: 验证重置密码令牌   # bdd/features/fastapi/users/password_reset.feature:14
    When 用户点击重置密码链接    # None
    Then 系统应验证重置令牌的有效性 # None
    And 允许用户设置新密码      # None

  Scenario: 完成密码重置      # bdd/features/fastapi/users/password_reset.feature:19
    Given 用户持有有效的重置密码令牌 # None
    When 用户设置新密码        # None
      | Field        | Value    |
      | new_password | Test123! |
    Then 系统应验证新密码强度     # None
    And 更新用户密码          # None
    And 使重置令牌失效         # None
    And 返回成功响应          # None

Feature: 个人信息管理 # bdd/features/fastapi/users/profile.feature:2
  作为系统用户
  我想管理我的个人信息
  以保持信息的准确性
  Scenario: 查看个人信息      # bdd/features/fastapi/users/profile.feature:7
    When 用户请求获取个人信息     # None
    Then 系统应返回用户详细信息，包含 # None
      | Field                   | Type    |
      | user_id                 | string  |
      | username                | string  |
      | email                   | string  |
      | roles                   | array   |
      | is_active               | boolean |
      | is_locked               | boolean |
      | require_password_change | boolean |

  Scenario: 更新个人信息  # bdd/features/fastapi/users/profile.feature:19
    When 用户更新个人信息   # None
      | Field    | Value          |
      | nickname | 测试用户           |
      | avatar   | new_avatar.jpg |
      | phone    | 13800138000    |
    Then 系统应保存更新的信息 # None
    And 返回成功响应      # None

  Scenario: 更新用户设置  # bdd/features/fastapi/users/profile.feature:28
    When 用户更新个人设置   # None
      | Field    | Value         |
      | language | zh_CN         |
      | theme    | dark          |
      | timezone | Asia/Shanghai |
    Then 系统应保存新的设置  # None
    And 返回成功响应      # None


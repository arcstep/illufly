@auth @login @api-doc @wip
Feature: 用户多设备登录管理 # bdd/features/fastapi/auth/mock/login.feature:3
  """
  用户认证系统 - 多设备登录管理
  基础路径: /api/auth
  版本: 0.7
  最后更新: 2024-12-15
  负责人: @xuehongwei
  - POST /auth/login: 用户登录
  - 参数 (Form):
  - username: str, 必填, 用户名
  - password: str, 必填, 密码
  - 返回:
  - success: bool
  - token_data: dict
  - require_password_change: bool
  - 错误码:
  - 400: 参数验证失败
  - 401: 认证失败
  - 403: 账户锁定/未激活
  - 500: 服务器错误
  - POST /auth/logout: 退出登录
  - 参数: 无
  - 返回:
  - success: bool
  - message: str
  - Cookie:
  - 清除 access_token
  - 清除 refresh_token
  - POST /auth/change-password: 修改密码
  - 参数 (Form):
  - current_password: str, 必填
  - new_password: str, 必填
  - 返回:
  - success: bool
  - message: str
  - 错误码:
  - 400: 密码验证失败
  - 500: 服务器错误
  实现支持多设备同时登录的用户认证系统，确保安全性的同时提供便捷的用户体验。
  - 用户需要在多个设备（手机、平板、电脑等）上同时使用系统
  - 需要支持单个设备的独立退出
  - 需要支持零登录(Zero Login)以提升用户体验
  - 零登录：利用刷新令牌自动完成登录，无需用户输入凭据
  - 设备令牌：每个设备独立的认证标识
  - HTTP-only Cookie：仅服务器可访问的安全Cookie
  - 所有密码必须符合强度要求
  - 支持账户锁定机制
  - 使用 HTTP-only Cookie 存储认证信息
  - REQ-001: 多设备支持
  - REQ-002: 设备管理
  - SEC-001: 认证安全策略
  """
  Background:   # bdd/features/fastapi/auth/mock/login.feature:70

  @core @happy-path
  Scenario: 成功登录单个设备     # bdd/features/fastapi/auth/mock/login.feature:75
    Given 系统已有注册用户       # bdd/features/steps/auth_login_steps.py:12
    When 用户在设备A提供正确的登录信息 # bdd/features/steps/auth_login_steps.py:29
      | Field    | Value      |
      | username | testuser   |
      | password | Test123!@# |
    Then 系统应验证用户凭据       # bdd/features/steps/auth_login_steps.py:58
    And 返回成功响应，包含        # bdd/features/steps/auth_login_steps.py:65
      | Field                   | Type    |
      | success                 | boolean |
      | token_data              | object  |
      | require_password_change | boolean |
    And 设置设备A的认证Cookie   # bdd/features/steps/auth_login_steps.py:82

  @core
  Scenario: 成功在多个设备上登录   # bdd/features/fastapi/auth/mock/login.feature:97
    Given 系统已有注册用户       # bdd/features/steps/auth_login_steps.py:12
    Given 用户已在设备A登录      # bdd/features/steps/auth_login_steps.py:119
    When 用户在设备B提供正确的登录信息 # bdd/features/steps/auth_login_steps.py:144
      | Field    | Value      |
      | username | testuser   |
      | password | Test123!@# |
    Then 系统应验证用户凭据       # bdd/features/steps/auth_login_steps.py:58
    And 返回成功响应，包含        # bdd/features/steps/auth_login_steps.py:65
      | Field                   | Type    |
      | success                 | boolean |
      | token_data              | object  |
      | require_password_change | boolean |
    And 设置设备B的认证Cookie   # bdd/features/steps/auth_login_steps.py:156

  @core
  Scenario: 单个设备退出         # bdd/features/fastapi/auth/mock/login.feature:112
    Given 系统已有注册用户         # bdd/features/steps/auth_login_steps.py:12
    Given 用户已在设备A和设备B登录    # bdd/features/steps/auth_login_steps.py:166
    When 用户在设备A请求退出        # bdd/features/steps/auth_login_steps.py:198
    Then 系统应清除设备A的认证Cookie # bdd/features/steps/auth_login_steps.py:223
    And 设备B的令牌仍然有效         # bdd/features/steps/auth_login_steps.py:266

  @core
  Scenario: 零登录支持              # bdd/features/fastapi/auth/mock/login.feature:119
    Given 系统已有注册用户             # bdd/features/steps/auth_login_steps.py:12
    Given 用户持有有效的http_only刷新令牌 # bdd/features/steps/auth_login_steps.py:283
    When 用户请求零登录               # bdd/features/steps/auth_login_steps.py:299
    Then 系统应验证刷新令牌             # bdd/features/steps/auth_login_steps.py:312
    And 返回成功响应，包含新的访问令牌        # bdd/features/steps/auth_login_steps.py:334

  @error
  Scenario: 登录失败 - 错误的凭据  # bdd/features/fastapi/auth/mock/login.feature:126
    Given 系统已有注册用户        # bdd/features/steps/auth_login_steps.py:12
    When 用户在设备A提供错误的登录信息  # bdd/features/steps/auth_login_steps.py:358
      | Field    | Value         |
      | username | testuser      |
      | password | wrongpassword |
    Then 系统应返回401未授权错误    # bdd/features/steps/auth_login_steps.py:376
    And 错误信息应包含认证失败的详情    # bdd/features/steps/auth_login_steps.py:391

  @error-handling
  Scenario: 登录失败 - 账户被锁定  # bdd/features/fastapi/auth/mock/login.feature:135
    Given 系统已有注册用户        # bdd/features/steps/auth_login_steps.py:12
    Given 用户账户已被锁定        # bdd/features/steps/auth_login_steps.py:408
    When 用户在设备A尝试登录       # bdd/features/steps/auth_login_steps.py:412
    Then 系统应返回403禁止访问错误   # bdd/features/steps/auth_login_steps.py:430
    And 错误信息应说明"账户已锁定"    # bdd/features/steps/auth_login_steps.py:443

  @error
  Scenario: 登录失败 - 账户未激活  # bdd/features/fastapi/auth/mock/login.feature:148
    Given 系统已有注册用户        # bdd/features/steps/auth_login_steps.py:12
    Given 系统已有注册用户        # bdd/features/steps/auth_login_steps.py:12
    Given 用户账户未激活         # bdd/features/steps/auth_login_steps.py:467
    When 用户在设备A尝试登录       # bdd/features/steps/auth_login_steps.py:412
    Then 系统应返回403禁止访问错误   # bdd/features/steps/auth_login_steps.py:430
    And 错误信息应说明"账户未激活"    # bdd/features/steps/auth_login_steps.py:455

  @error
  Scenario: 登录失败 - 缺少必填字段  # bdd/features/fastapi/auth/mock/login.feature:156
    Given 系统已有注册用户         # bdd/features/steps/auth_login_steps.py:12
    When 用户在设备A提供不完整的登录信息  # bdd/features/steps/auth_login_steps.py:471
      | Field    | Value    |
      | username | testuser |
    Then 系统应返回400错误        # bdd/features/steps/auth_login_steps.py:489
    And 错误信息应说明缺少必填字段      # bdd/features/steps/auth_login_steps.py:504
      """
      ## 实现注意事项
      
      ### 安全实现
      - 密码验证必须使用恒定时间比较，防止计时攻击
      - 所有登录尝试需要记录审计日志
      - 实现 rate limiting 防止暴力破解
      - 考虑使用 IP 信誉系统
      
      ### 会话管理
      - 使用 Redis 存储会话状态
      - 实现会话集群同步机制
      - 设置合理的会话超时时间
      - 维护设备令牌映射关系
      
      ### 性能考虑
      - 密码哈希使用适当的计算强度
      - 令牌验证需要缓存机制
      - 考虑登录请求的并发处理
      - 实现登录队列防止峰值冲击
      
      ### 监控告警
      - 监控异常登录行为
      - 设置账户锁定告警
      - 记录地理位置异常
      - 可疑IP活动检测
      
      ### 运维支持
      - 提供管理员解锁接口
      - 支持会话强制失效
      - 实现登录日志查询
      - 提供会话状态诊断
      
      ### 客户端集成
      - 提供登录状态检查接口
      - 实现令牌自动刷新机制
      - 处理多标签页同步
      - 支持优雅的掉线重连
      """

